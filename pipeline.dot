digraph {
  rankdir=UD

  typecheck_module [label="typecheck_module(module: ModuleId)"]
  typecheck_module -> parsed_module [label="(get SCCs)"]
  typecheck_module -> typechecked_scc [label="(for each SCC)"]

  type_of [label="type_of(id: DefId) -> Type"]
  type_of -> scc_of [label="(if no explicit_type_signature)"]
  type_of -> typechecked_scc [label="(if no explicit_type_signature)"]
  type_of -> type_signature

  scc_of [label="scc_of(id: DefId) -> SccId"]
  scc_of -> parsed_module

  defs_in_scc [label="defs_in_scc(id: SccId)\n -> Vec<DefId>"]
  defs_in_scc -> parsed_module

  typechecked_scc [label="typechecked_scc(id: SccId)\n -> Vec<(DefId, Expr, Type)>"]
  typechecked_scc -> defs_in_scc
  typechecked_scc -> desugared_decl [label="(each def in SCC)"]
  typechecked_scc -> type_of [label="(used defs)"]
  typechecked_scc -> instances_in_module [label="(for each module referenced in\n a constraint being solved)"]

  instances_in_module [label="instances_in_module(class: DefId, module: ModuleId)"]
  instances_in_module -> renamed_decl [label="(for each instance in module)"]
  instances_in_module -> parsed_module [label="(get list of instances)"]

  type_signature [label="explicit_type_signature(id: DefId)\n-> Option<Type>"]
  type_signature -> renamed_decl

  desugared_decl [label="desugared_decl(id: DefId)"]
  desugared_decl -> renamed_decl
  
  renamed_decl [label="renamed_decl(id: DefId)"]
  renamed_decl -> parsed_decl
  renamed_decl -> imported_defs

  imported_defs [label="imported_defs(module: ModuleId)\n-> Vec<DefId>"]
  imported_defs -> parsed_module
  imported_defs -> exported_defs [label="  (modules imported without import list)"]

  exported_defs [label="exported_defs(module: ModuleId)\n -> Vec<DefId>"]
  exported_defs -> parsed_module
  
  parsed_decl -> parsed_module
  parsed_decl [label="parsed_decl(id: DeclId)"]
  parsed_module [label="parsed_module(module: ModuleId) -> Module"]
}

