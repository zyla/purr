use crate::token::Token;
use crate::errors;
use crate::errors::*;
use crate::ast::*;
use crate::symbol::*;
use crate::string::*;
use crate::ModuleId;
use lalrpop_util::ErrorRecovery;
use lalrpop_util::ParseError;
use std::str::FromStr;

grammar<'err>(db: &dyn crate::Db, errors: &'err mut Vec<ErrorRecovery<usize, Token, &'static str>>);

pub Module: Module = Located<Commented<ModuleInner>>;

ModuleInner: ModuleInner = {
  "module" <name:ModuleName>
  <exports:("(" <SepBy<DeclarationRef, ",">> ")")?>
  "where" <guts:ModuleGuts>
      => ModuleInner { name, exports, imports: guts.0, declarations: guts.1 }
};

ModuleGuts: (Vec<Import>, Vec<Declaration>) = {
  () => (vec![], vec![]),
  LayoutStart
    <first:Import>
    <mut imports:( LayoutSep <Import> )*>
    <declarations:( LayoutSep <Declaration> )*>
    LayoutEnd => {
      imports.insert(0, first);
      (imports, declarations)
    },
  LayoutStart <declarations:SepBy1<Declaration, LayoutSep>> LayoutEnd => (vec![], declarations),
};

Import: Import = Located<ImportInner>;

ImportInner: ImportInner = {
  "import" <module:ModuleName>
    <kind:ImportDeclarationKind>
    <alias:("as" <ModuleName>)?> =>
    ImportInner{module,kind,alias}
};

ImportDeclarationKind: ImportDeclarationKind = {
  () => ImportDeclarationKind::Implicit,
  "(" <SepBy<DeclarationRef, ",">> ")" => ImportDeclarationKind::Explicit(<>),
  "hiding" "(" <SepBy<DeclarationRef, ",">> ")" => ImportDeclarationKind::Hiding(<>),
};

LowerIdent: Symbol = {
  lower_ident => Symbol::new(db, <>),
  "as" => Symbol::new(db, "as".into()),
  "hiding" => Symbol::new(db, "hiding".into()),
  "role" => Symbol::new(db, "role".into()),
  "nominal" => Symbol::new(db, "nominal".into()),
  "representational" => Symbol::new(db, "representational".into()),
  "phantom" => Symbol::new(db, "phantom".into()),
};

pub LowerQualifiedIdent: QualifiedName = {
  LowerIdent => QualifiedName::new_unqualified(db, <>),
  lower_qualified_ident => QualifiedName::new_qualified(db, ModuleId::new(db, <>.0), Symbol::new(db, <>.1)),
};

UpperIdent: Symbol = {
  upper_ident => Symbol::new(db, <>)
};

UpperQualifiedIdent: QualifiedName = {
  UpperIdent => QualifiedName::new_unqualified(db, <>),
  upper_qualified_ident => QualifiedName::new_qualified(db, ModuleId::new(db, <>.0), Symbol::new(db, <>.1)),
};


Located<T>: Located<T> = {
  <start:@L> <v:T> <end:@R> => Located(SourceSpan::new(start, end), v)
};

MaybeLayoutBlock<T>: Vec<T> = {
  LayoutBlock<T>? => <>.unwrap_or_else(|| vec![])
}

LayoutBlock<T>: Vec<T> = {
  LayoutStart <v:SepBy<T, LayoutSep>> LayoutEnd => v
}

DeclarationRef: DeclarationRef = Located<DeclarationRefKind>;

DeclarationRefKind: DeclarationRefKind = {
  "class" <name:UpperIdent> => DeclarationRefKind::TypeClass{name},
  "type" "(" <name:TypeOperator> ")" => DeclarationRefKind::TypeOp{name},
  <name:UpperIdent> <constructors:DeclarationRefConstructors?> =>
    DeclarationRefKind::Type{name,constructors},
  <name:LowerIdent> => DeclarationRefKind::Value{name},
  "(" <name:Operator> ")" => DeclarationRefKind::ValueOp{name},
  "module" <name:ModuleName> => DeclarationRefKind::Module{name},
};

ModuleName: ModuleId = {
  upper_ident => ModuleId::new(db, <>),
  upper_qualified_ident => ModuleId::new(db, format!("{}.{}", <>.0, <>.1)),
};

TypeOperator: Symbol = {
  Operator,
  "->" => Symbol::new(db, "->".into()),
};

DeclarationRefConstructors: DeclarationRefConstructors = {
  "(" ".." ")" => DeclarationRefConstructors::All,
  "(" <SepBy<UpperIdent, ",">> ")" => DeclarationRefConstructors::Some(<>),
};

Declaration: Declaration = Located<Commented<DeclarationKind>>;

DeclarationKind: DeclarationKind = {
  ValueDeclaration => DeclarationKind::ValueDeclaration(<>),
  TypeDeclaration => DeclarationKind::TypeSignature(<>),

  "type" <name:UpperIdent> <params:TypeParameter*> "=" <body:Type> => DeclarationKind::TypeSynonym{name, params, body},
  "type" <name:UpperIdent> "::" <kind:Type> =>
    DeclarationKind::KindSignature { for_type: KindSignatureFor::TypeSynonym, name, kind },

  "type" "role" <ident:UpperIdent> <role:Role*> =>
    DeclarationKind::Role(RoleDeclarationData{ ident, role }),

  "foreign" "import" <name:LowerIdent> "::" <type_:Type> => DeclarationKind::ForeignValue{name, type_},
  ClassDeclaration,
  InstanceChain => DeclarationKind::InstanceChain(<>),
  DataDeclaration,
  OperatorDeclaration,
  
  
}

Role: Role = {
  "nominal" => Role::Nominal,
  "representational" => Role::Representational,
  "phantom" => Role::Phantom,
};

OperatorDeclaration: DeclarationKind = {
  <associativity:Associativity>
  <precedence:int>
  <name:OperatorTarget>
  "as"
  <operator:Operator>
    => DeclarationKind::Operator {
        associativity,
        precedence: precedence as u8,
        name,
        operator,
    },
};

Associativity: Associativity = {
  "infix" => Associativity::None,
  "infixl" => Associativity::Left,
  "infixr" => Associativity::Right,
};

OperatorTarget: OperatorTarget = {
  <LowerQualifiedIdent> => OperatorTarget::Value(<>),
  <UpperQualifiedIdent> => OperatorTarget::DataConstructor(<>),
  "type" <UpperQualifiedIdent> => OperatorTarget::Type(<>),
};

LetDeclaration: Declaration = Located<Commented<LetDeclarationKind>>;

LetDeclarationKind: DeclarationKind = {
  ValueDeclaration => DeclarationKind::ValueDeclaration(<>),
  TypeDeclaration => DeclarationKind::TypeSignature(<>),
  <pat:AsPat<ExprV<"let_pat">>> <expr:PossiblyGuarded<"=", Located<ExprWhere>>> => DeclarationKind::Destructuring { pat, expr },
}

DataDeclaration: DeclarationKind = {
  <type_:DataDeclType> <name:UpperIdent>
    <params:TypeParameter*>
    <kind:("::" <Type>)?>
    <constructors:("=" <SepBy1<DataConstructorDeclaration, "|">>)?> =>
    DeclarationKind::Data {
      type_,
      name,
      params,
      kind,
      constructors: constructors.unwrap_or_else(|| vec![]),
    }
};

DataConstructorDeclaration = Located<Commented<DataConstructorDeclarationData>>;

DataConstructorDeclarationData: DataConstructorDeclarationData = {
  <name:UpperIdent> <fields:Located<AtomicType>*> => DataConstructorDeclarationData{ name, fields }
};

DataDeclType: DataDeclType = {
  "data" => DataDeclType::Data,
  "foreign" "import" "data" => DataDeclType::ForeignData,
  "newtype" => DataDeclType::Newtype,
};

ClassDeclaration: DeclarationKind = {
  "class" <name:UpperIdent> "::" <kind:Type> =>
    DeclarationKind::KindSignature { for_type: KindSignatureFor::Class, name, kind },

  "class"
    <constraints:(<TypeClassConstraints> "<=")?>
    <head:Located<Constraint>>
    <fundeps:( "|" <SepBy<Fundep, ",">> )?>
    <start:@L> <methods:("where" <MaybeLayoutBlock<TypeDeclaration>>)?> <end:@R> =>? {
      let (name, params) = super::constraint_to_class_head(db, head)   
        .ok_or_else(|| ParseError::User {
            error: Error::new(start, end, ErrorKind::InvalidClassHead)
        })?;
      Ok(DeclarationKind::Class(TypeClassDeclaration {
        constraints: constraints.unwrap_or_else(|| vec![]),
        name,
        params,
        fundeps: fundeps.unwrap_or_else(|| vec![]),
        methods: methods.unwrap_or_else(|| vec![]),
      }))
    }
};

Fundep: Fundep = {
  <from:LowerIdent+> "->" <to:LowerIdent+> => Fundep{from, to},
};

InstanceChain: Vec<InstanceDeclaration> = SepBy1<InstanceDeclaration, ("else" LayoutSep?)>;

InstanceDeclaration: InstanceDeclaration = {
  <instance_type:InstanceType>
  "instance"
    <instance_name:(<LowerIdent> "::")?>
    <constraints:(<TypeClassConstraints> "=>")?>
    <head:Located<Constraint>>
    <start:@L> <body:("where" <MaybeLayoutBlock<LetDeclaration>>)?> <end:@R> =>? {
      let (class, args) = super::constraint_to_instance_head(head)
        .ok_or_else(|| ParseError::User {
            error: Error::new(start, end, ErrorKind::InvalidInstanceHead)
        })?;
      Ok(InstanceDeclaration {
        constraints: constraints.unwrap_or_else(|| vec![]),
        instance_type,
        instance_name,
        class,
        args,
        body: body.unwrap_or_else(|| vec![]),
      })
    }
};

InstanceType: InstanceType = {
  () => InstanceType::Plain,
  "derive" => InstanceType::Derive,
  "derive" "newtype" => InstanceType::DeriveNewtype,
};

TypeClassConstraints: Vec<Type> = {
  <Located<Constraint>> => vec![<>],
  "(" <SepBy<Located<Constraint>, ",">> ")"
};

TypeParameter: TypeParameter = {
  <name:LowerIdent> => (name, None),
  "(" <name:LowerIdent> "::" <type_:Type> ")" => (name, Some(type_))
};

ValueDeclaration: ValueDeclaration = {
  <ident:LowerIdent> <params:AsPat<Located<PrimaryExpr<"full">>>*> <expr:PossiblyGuarded<"=", Located<ExprWhere>>> =>
    ValueDeclaration{ ident, params, expr },
}

TypeDeclaration: TypeDeclarationData = {
  <ident:LowerIdent> "::" <type_:Type> => TypeDeclarationData::new(ident,type_)
}

pub Expr = ExprV<"full">;

ExprV<Variant> = Located<ExprKind<Variant>>;

ExprWhere: ExprKind = {
  ExprKind<"full">,
  <body:Box<Expr>> "where" <decls:LayoutBlock<LetDeclaration>>
    => ExprKind::Let{ decls, body },
};

ExprKind<Variant>: ExprKind = Expr0<Variant>;

ApplyLambda<E>: ExprKind = {
  LambdaLike,
  <f:Located<E>> <x:Located<LambdaLike>> => super::normalize_app(f, x),
};

LambdaLike: ExprKind = {
  "\\" <params:AsPat<Located<PrimaryExpr<"full">>>+> "->" <body:Box<Expr>>
    => ExprKind::Lam(params, body),
  "if" <cond:Box<Expr>> "then" <then_:Box<Expr>> "else" <else_:Box<Expr>>
    => ExprKind::If{ cond, then_, else_ },
  "let" <decls:LayoutBlock<LetDeclaration>> "in" <body:Box<Expr>>
    => ExprKind::Let{ decls, body },
  "ado" <items:LayoutBlock<DoItem>> "in" <expr:Box<Expr>>
    => ExprKind::Ado(items, expr),
};

// Typed
Expr0<Variant> = Expr1<Variant>;

// Infix
Expr1<Variant>: ExprKind = {
  Expr2<Variant>,
  ApplyLambda<Expr2<Variant>> if Variant == "full",
  <expr:Box<Located<Expr2<Variant>>>> "::" <type_:Box<Type>> if Variant == "full" => ExprKind::Typed(expr, type_),
  <first:Box<Located<Expr2<Variant>>>> <rest:( <InfixOp<Variant>> <Located<Expr2<"full">>> )+>
    => ExprKind::Infix(first, rest),
  <start:@L> <first:Box<Located<Expr2<Variant>>>> <rest:( <InfixOp<Variant>> <Located<Expr2<"full">>> )+> <end:@R> "::" <type_:Box<Type>>
    if Variant == "full" => ExprKind::Typed(Box::new(Located(SourceSpan::new(start, end), ExprKind::Infix(first, rest))), type_),
  <first:Box<Located<Expr2<Variant>>>> <mut rest:( <InfixOp<Variant>> <Located<Expr2<"full">>> )*> <last:( <InfixOp<Variant>> <Located<ApplyLambda<Expr2<"full">>>> )>
    if Variant == "full" => {
      rest.push(last);
      ExprKind::Infix(first, rest)
    },
};

QualifiedOp<Op>: QualifiedName = {
  Op => QualifiedName::new_unqualified(db, <>),
  qualified_operator => QualifiedName::new_qualified(db, ModuleId::new(db, <>.0), Symbol::new(db, <>.1)),
};

TypeInfixOperator: Symbol = {
  operator => Symbol::new(db, <>),
  "-" => Symbol::new(db, "-".into()),
}

Operator: Symbol = {
  operator => Symbol::new(db, <>),
  "<=" => Symbol::new(db, "<=".into()),
  "=>" => Symbol::new(db, "=>".into()),
  "-" => Symbol::new(db, "-".into()),
  ":" => Symbol::new(db, ":".into()),
  ".." => Symbol::new(db, "..".into()),
};

InfixOp<Variant>: InfixOp = {
  <QualifiedOp<Operator>> => InfixOp::Symbol(<>),
  "`" <Box<Located<Expr1<"backtick">>>> "`" if Variant != "backtick" => InfixOp::Backtick(<>),
};

// Backtick - handled above
Expr2<Variant> = Expr3<Variant>;

// Negate
Expr3<Variant>: ExprKind = {
  Expr4<Variant>,
  "-" <Box<Located<Expr4<Variant>>>> => ExprKind::Negate(<>),
};

// Apply
Expr4<Variant>: ExprKind = {
  Expr5<Variant>,
  <f:Located<Expr5<Variant>>> <args:Located<Expr5<"full">>+>
    => super::apply_record_updates(f, args),
};

// Was if, let etc. - moved up
Expr5<Variant> = Expr6<Variant>;

// Record update - handled elsewhere
Expr6<Variant> = Expr7<Variant>;

// Accessor
Expr7<Variant>: ExprKind = {
  PrimaryExpr<Variant>,
  <obj:Box<Located<Expr7<Variant>>>> "." <label:Label> => ExprKind::Accessor(obj, label),
};

PrimaryExpr<Variant>: ExprKind = {
  Literal<Expr, RecordShortcutExpr> => ExprKind::Literal(<>),
  "{" <SepBy1<RecordUpdate, ",">> "}" => ExprKind::RecordUpdateSuffix(<>),
  LowerQualifiedIdent if Variant != "let_pat" => ExprKind::Var(<>),
  <name:LowerIdent> "@" <expr:Box<Located<PrimaryExpr<"full">>>> => ExprKind::NamedPat(name, expr),
  UpperQualifiedIdent => ExprKind::DataConstructor(<>),
  "(" <ExprKind<"full">> ")" => <>,
  "_" => ExprKind::Wildcard,
  "do" <LayoutBlock<DoItem>> => ExprKind::Do(<>),
  "(" <InfixOp<"full">> ")" => ExprKind::Operator(<>),
  "case" <exprs:SepBy1<Expr, ",">> "of" <branches:LayoutBlock<CaseBranch>>
    => ExprKind::Case{ exprs, branches },
}

RecordUpdate: (Symbol, Expr) = {
  <label:Label> "=" <expr:Expr> => (label, expr)
};

CaseBranch: CaseBranch = {
  <pats:SepBy1<AsPat<ExprV<"case_pat">>, ",">> <expr:PossiblyGuarded<"->", Located<ExprWhere>>> => CaseBranch{ pats, expr }
};

DoItem: DoItem = {
  "let" <LayoutBlock<LetDeclaration>> => DoItem::Let(<>),
  <Expr> => DoItem::Expr(<>),
  <pat:AsPat<Expr>> "<-" <expr:Expr> => DoItem::Bind(pat, expr),
};

AsPat<E>: Pat = {
  <start:@L> <x:E> <end:@R> =>? {
    super::expr_to_pat(db, x)
      .map_err(|err| ParseError::User {
          error: Error::new(start, end, ErrorKind::Unknown(err))
      })
  }
};

Literal<T, RecordShortcut>: Literal<T> = {
  int => Literal::Integer(<> as i64),
  <start:@L> <f:float> <end:@R> =>?
      Ok(Literal::Float(f64::from_str(&f)
        .map_err(|_| ParseError::User {
            error: Error::new(start, end, ErrorKind::InvalidFloatingPointNumber)
        })?.into())),
  string => Literal::String(<>),
  char => Literal::Char(<>),
  "true" => Literal::Boolean(true),
  "false" => Literal::Boolean(false),
  "[" <SepBy<T, ",">> "]" => Literal::Array(<>),
  "{" <SepBy<RecordField<T, RecordShortcut>, ",">> "}" => Literal::Object(<>),
}

RecordField<T, RecordShortcut>: (Symbol, T) = {
  <label:Label> ":" <expr:T> => (label, expr),
  RecordShortcut
};

RecordShortcutExpr: (Symbol, Expr) = {
  // Note: string literal labels not allowed here, because they may not be a valid variable name
  <start:@L> <label:lower_ident> <end:@R> => {
    let label = Symbol::new(db, label);
    (
      label.clone(),
      Located(SourceSpan::new(start, end), ExprKind::Var(QualifiedName::new_unqualified(db, label)))
    )
  }
};

PossiblyGuarded<Sep, E>: PossiblyGuardedExpr = {
  Sep <E> => PossiblyGuardedExpr::Unconditional(<>),
  <GuardedExpr<Sep, E>+> => PossiblyGuardedExpr::Guarded(<>),
};

GuardedExpr<Sep, E>: GuardedExpr = {
  "|" <guards:SepBy1<Guard, ",">> Sep <expr:E> => GuardedExpr{ guards, expr }
};

Guard: Guard = {
  <ExprV<"case_pat">> => Guard::Expr(<>),
  <pat:AsPat<ExprV<"case_pat">>> "<-" <expr:ExprV<"case_pat">> => Guard::Bind(pat, expr),
};

// TODO: extract the comments
Commented<T>: Commented<T> = {
  <v:T> => Commented(vec![], v)
};

SepBy<T, Sep>: Vec<T> = {
    <v:(<T> Sep)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

SepBy1<T, Sep>: Vec<T> = {
    <v:(<T> Sep)*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

OptionalList<T, X>: Vec<T> = {
  X? => <>.unwrap_or_else(|| vec![]),
};

////////////////////////////////////////////////////////////////////////////////
// Type
////////////////////////////////////////////////////////////////////////////////

pub Type = Located<Type1>;

Type1: TypeKind = {
  // TODO: At first I put the forall in AtomicType, but it resulted in parse conflicts.
  // Here it seems to work. I have no idea why.
  "forall" <vars:OneOrMore<ForallVar>> "." <body:Type> =>
    TypeKind::ForAll{vars,body:Box::new(body),skolem_scope:None},
  <constraint:Located<TypeInfix>> "=>" <body:Type> =>
    TypeKind::Constrained{constraint:Box::new(constraint),body:Box::new(body)},
  <arg:Located<TypeInfix>> "->" <result:Type> =>
    TypeKind::FunctionType(Box::new(arg), Box::new(result)),
  TypeInfix
}

Constraint: TypeKind = {
  <l:Located<Constraint>> <r:Located<AtomicType>> => TypeKind::TypeApp(Box::new(l), Box::new(r)),
  TypeConstructor
};

TypeInfix: TypeKind = {
  TypeApp,
  <first:Box<Located<TypeApp>>> <next:( <QualifiedOp<TypeInfixOperator>> <Located<TypeApp>> )+> =>
    TypeKind::Infix(first, next),
}

TypeApp: TypeKind = {
  <l:Located<TypeApp>> <r:Located<AtomicType>> => TypeKind::TypeApp(Box::new(l), Box::new(r)),
  AtomicType
};

TypeConstructor: TypeKind = {
  UpperQualifiedIdent => TypeKind::TypeConstructor(<>),
};

AtomicType: TypeKind = {
  LowerIdent => TypeKind::Var(<>),
  "(" <QualifiedOp<TypeOperator>> ")" => TypeKind::Operator(<>),
  string => TypeKind::TypeLevelString(<>),
  int => TypeKind::TypeLevelInt(<>.into()),
  "(" "-" <int> ")" => TypeKind::TypeLevelInt((-(<> as i64)).into()),
  "_" => TypeKind::Wildcard(WildcardKind::Unnamed),
  // TODO: hole

  TypeConstructor,
  "(" <fields:SepBy<RowField, ",">> <rest:RowRest?> ")" => TypeKind::Row{fields,rest},
  <record_start:@L> "{" <record_end:@R>
  <row_start:@L> <fields:SepBy<RowField, ",">> <rest:RowRest?> <row_end:@R> "}" =>
    TypeKind::TypeApp(
      Box::new(
        Located(SourceSpan::new(record_start, record_end), 
          TypeKind::TypeConstructor(QualifiedName::new_qualified(db, ModuleId::new(db, "Prim".into()), Symbol::new(db, "Record".into()))))),
      Box::new(
        Located(SourceSpan::new(row_start, row_end), 
          TypeKind::Row{fields,rest}))
    ),
  "(" <v:Type1> ")" => v,
};

RowField: (Symbol, Type) = {
  <label:Label> "::" <ty:Type> => (label, ty)
}

RowRest: Box<Type> = {
  "|" <ty:Type> => Box::new(ty)
}

/// A record field label
Label: Symbol = {
  LowerIdent,
  <start:@L> <s:string> <end:@R> =>? Ok(Symbol::new(db, s.try_into().map_err(|NonUsvChar| ParseError::User {
      error: Error::new(start, end, ErrorKind::NonUsvChar)
  })?)),

  "ado" => Symbol::new(db, "ado".into()),
  "case" => Symbol::new(db, "case".into()),
  "class" => Symbol::new(db, "class".into()),
  "data" => Symbol::new(db, "data".into()),
  "derive" => Symbol::new(db, "derive".into()),
  "do" => Symbol::new(db, "do".into()),
  "else" => Symbol::new(db, "else".into()),
  "false" => Symbol::new(db, "false".into()),
  "forall" => Symbol::new(db, "forall".into()),
  "foreign" => Symbol::new(db, "foreign".into()),
  "import" => Symbol::new(db, "import".into()),
  "if" => Symbol::new(db, "if".into()),
  "in" => Symbol::new(db, "in".into()),
  "infix" => Symbol::new(db, "infix".into()),
  "infixl" => Symbol::new(db, "infixl".into()),
  "infixr" => Symbol::new(db, "infixr".into()),
  "instance" => Symbol::new(db, "instance".into()),
  "let" => Symbol::new(db, "let".into()),
  "module" => Symbol::new(db, "module".into()),
  "newtype" => Symbol::new(db, "newtype".into()),
  "of" => Symbol::new(db, "of".into()),
  "then" => Symbol::new(db, "then".into()),
  "true" => Symbol::new(db, "true".into()),
  "type" => Symbol::new(db, "type".into()),
  "where" => Symbol::new(db, "where".into()),
};

ForallVar: (Symbol, Option<Box<Type>>) = {
  <name:LowerIdent> => (name, None),
  "(" <name:LowerIdent> "::" <kind:Type> ")" => (name, Some(Box::new(kind))),
};

OneOrMore<T>: Vec<T> = {
  <xs:T*> <x:T> => {
    let mut xs = xs;
    xs.push(x);
    xs
  }
}

Box<T>: Box<T> = {
  <T> => Box::new(<>)
}

extern {
  type Location = usize;
  type Error = errors::Error;

  enum Token {
    int => Token::IntegerLiteral(<u64>),
    float => Token::FloatLiteral(<String>),
    string => Token::StringLiteral(<PSString>),
    char => Token::CharLiteral(<PSChar>),
    lower_ident => Token::LowerIdentifier(<String>),
    lower_qualified_ident => Token::QualifiedLowerIdentifier(<(String, String)>),
    upper_ident => Token::UpperIdentifier(<String>),
    upper_qualified_ident => Token::QualifiedUpperIdentifier(<(String, String)>),

    // Layout
    LayoutStart => Token::LayoutStart,
    LayoutSep => Token::LayoutSep,
    LayoutEnd => Token::LayoutEnd,

    // Operators
    "(" => Token::LeftParen,
    ")" => Token::RightParen,
    "{" => Token::LeftBrace,
    "}" => Token::RightBrace,
    "[" => Token::LeftBracket,
    "]" => Token::RightBracket,
    "`" => Token::Backtick,
    "=" => Token::Equal,
    "|" => Token::Pipe,
    "," => Token::Comma,
    ":" => Token::Colon,
    ";" => Token::Semicolon,
    "." => Token::Dot,
    "\\" => Token::Backslash,
    "@" => Token::At,
    "-" => Token::Minus,

    "->" => Token::Arrow,
    "=>" => Token::FatArrow,
    "<=" => Token::LeftFatArrow,
    "::" => Token::TypeOf,
    "<-" => Token::Bind,
    ".." => Token::DotDot,

    operator => Token::Operator(<String>),
    qualified_operator => Token::QualifiedOperator(<(String, String)>),

    // Keywords
    "if" => Token::If,
    "then" => Token::Then,
    "else" => Token::Else,
    "ado" => Token::Ado,
    "do" => Token::Do,
    "case" => Token::Case,
    "of" => Token::Of,
    "let" => Token::Let,
    "in" => Token::In,
    "where" => Token::Where,
    "instance" => Token::Instance,
    "module" => Token::Module,
    "import" => Token::Import,
    "forall" => Token::Forall,
    "true" => Token::True,
    "false" => Token::False,
    "class" => Token::Class,
    "type" => Token::Type,
    "as" => Token::As,
    "hiding" => Token::Hiding,
    "foreign" => Token::Foreign,
    "derive" => Token::Derive,
    "newtype" => Token::Newtype,
    "data" => Token::Data,
    "infix" => Token::Infix,
    "infixl" => Token::Infixl,
    "infixr" => Token::Infixr,
    "role" => Token::Role,
    "nominal" => Token::Nominal,
    "representational" => Token::Representational,
    "phantom" => Token::Phantom,
    "_" => Token::Wildcard,
  }
}
