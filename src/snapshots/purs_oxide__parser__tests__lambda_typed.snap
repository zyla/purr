---
source: src/parser.rs
expression: "parse_expr(\"\\\\x -> 1 :: Int\")"
---
Located(
    SourceSpan {
        decl: Module(
            ModuleId {
                name: "Test",
            },
        ),
        start: 0,
        end: 14,
    },
    Lam(
        [
            Located(
                SourceSpan {
                    decl: Module(
                        ModuleId {
                            name: "Test",
                        },
                    ),
                    start: 1,
                    end: 2,
                },
                Var(
                    Symbol {
                        text: "x",
                    },
                ),
            ),
        ],
        Located(
            SourceSpan {
                decl: Module(
                    ModuleId {
                        name: "Test",
                    },
                ),
                start: 6,
                end: 14,
            },
            Typed(
                Located(
                    SourceSpan {
                        decl: Module(
                            ModuleId {
                                name: "Test",
                            },
                        ),
                        start: 6,
                        end: 7,
                    },
                    Literal(
                        Integer(
                            1,
                        ),
                    ),
                ),
                Located(
                    SourceSpan {
                        decl: Module(
                            ModuleId {
                                name: "Test",
                            },
                        ),
                        start: 11,
                        end: 14,
                    },
                    TypeConstructor(
                        QualifiedName {
                            module: None,
                            name: Symbol {
                                text: "Int",
                            },
                        },
                    ),
                ),
            ),
        ),
    ),
)
