digraph {
  rankdir=UD
  node [shape=box]

  value_decl_code [label="value_decl_code(id: AbsoluteName) -> JS"]
  value_decl_code -> typechecked_scc [label="(elaborated expr)"]
  value_decl_code -> indexed_module [label="(SourceSpan mapping for error msgs)"]

  value_decl_code_acc [label="value_decl_code_acc(id: AbsoluteName)"]
  value_decl_code_acc -> value_decl_code
  value_decl_code_acc -> value_decl_code_acc [label="(deps)"]

  typecheck_module [label="typecheck_module(module: ModuleId)"]
  typecheck_module -> renamed_module [label="(get SCCs)"]
  typecheck_module -> typechecked_scc [label="(for each SCC)"]

  type_of [label="type_of(id: DeclId) -> Type"]
  type_of -> scc_of [label="(if no explicit_type_signature)"]
  type_of -> typechecked_scc [label="(if no explicit_type_signature)"]
  type_of -> explicit_type_signature

  scc_of [label="scc_of(id: DeclId) -> SccId"]
  scc_of -> renamed_module

  decls_in_scc [label="decls_in_scc(id: SccId)\n -> Vec<DeclId>"]
  decls_in_scc -> renamed_module

  typechecked_scc [label="typechecked_scc(id: SccId)\n -> Vec<(DeclId, Expr, Type)>"]
  typechecked_scc -> decls_in_scc
  typechecked_scc -> renamed_decl [label="(each decl in SCC)"]
  typechecked_scc -> type_of [label="(used decls)"]
  typechecked_scc -> instances_in_module [label="(for each module referenced in\n a constraint being solved)"]

  instances_in_module [label="instances_in_module(class: DeclId, module: ModuleId)"]
  instances_in_module -> renamed_decl [label="(for each instance in module)"]
  instances_in_module -> parsed_module [label=" (get list of instances)"]

  explicit_type_signature [label="explicit_type_signature(id: DeclId)\n-> Option<Type>"]
  explicit_type_signature -> renamed_decl

  renamed_decl [label="renamed_decl(id: DeclId)"]
  renamed_decl -> renamed_module

  renamed_module [label="renamed_module(module: ModuleId)"]
  renamed_module -> indexed_module
  renamed_module -> imported_decls

  indexed_module [label="indexed_module(module: ModuleId) -> Module"]
  indexed_module -> parsed_module

  imported_decls [label="imported_decls(module: ModuleId)\n-> Vec<DeclId>"]
  imported_decls -> indexed_module
  imported_decls -> exported_decls [label=" (blanket imports)"]

  exported_decls [label="exported_decls(module: ModuleId)\n -> Vec<DeclId>"]
  exported_decls -> indexed_module
  exported_decls -> exported_decls [label=" (blanket reexports)"]
  
  parsed_module [label="parsed_module(module: ModuleId) -> Module"]
}

